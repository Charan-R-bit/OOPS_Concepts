Object
An entity that has state and behavior is known as an object e.g., chair, bike, marker, pen, table, car

A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical.

A class in Java can contain:
Fields
Methods
Constructors
Blocks
Nested class and interface


Inheritance IS-A relationship
 in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOPs (Object Oriented programming system).

Single
multilevel
hierarchy
multiple
hybrid

polymorphism in Java is a concept by which we can perform a single action in different ways. Polymorphism is derived from 2 Greek words: poly and morphs. The word "poly" means many and "morphs" means forms. So polymorphism means many forms.

There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism. We can perform polymorphism in java by method overloading and method overriding.
hybrid

Abstraction is a process of hiding the implementation details and showing only functionality to the users

Abstraction lets you focus on what the object does instead of how it does it.

Ways to achieve Abstraction
There are two ways to achieve abstraction in java

Encapsulation in Java is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.
we use getter and setter to write and read 
Abstract class (0 to 100%)
Interface (100%)
eg java bean class

exceptions are unwanted errors that occurs during programming

throwable is the parent class for exception and error classes

Exceptions
The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors so that the normal flow of the application can be maintained.

by using exceptions we could control the flow of the program, with out interrupting other functions

Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, 
IOException, 
SQLException,
RemoteException, etc.

1.Checked Exception
2.Unchecked Exception
3.Error

1) Checked Exception
The classes that directly inherit the Throwable class except RuntimeExc0eption and Error are known as checked exceptions. For example, 1.IOException,
2.SQLException,

2)Checked exceptions are checked at compile-time.

2) Unchecked Exception
The classes that inherit the RuntimeException are known as unchecked exceptions. For example, 
ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, etc. Unchecked exceptions are not checked at compile-time, but they are checked at runtime.

 Error
Error is irrecoverable. Some example of errors are OutOfMemoryError, VirtualMachineError, AssertionError etc.

try  (expecting exceptions)
The "try" keyword is used to specify a block where we should place an exception code. It means we can't use try block alone. The try block must be followed by either catch or finally.

catch	
The "catch" block is used to handle the exception. It must be preceded by try block which means we can't use catch block alone. It can be followed by finally block later.
finally	The "finally" block is used to execute the necessary code of the program. It is executed whether an exception is handled or not.

throw	
The "throw" keyword is used to throw an exception.

throws	 used with method signature
The "throws" keyword is used to declare exceptions. It specifies that there may occur an exception in the method. It doesn't throw an exception. It is always used with method signature.

finally
The finally block executes whether exception rise or not and whether exception handled or not.

A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created.

constructor are invoked implicitly when we instantiate an object
constructors have same name as the class name and must not have a return type

types of constructor
No-Arg Constructor 
- a constructor that does not accept any arguments
Parameterized constructor 
- a constructor that accepts arguments
Default Constructor 
- a constructor that is automatically created by the Java compiler if it is not explicitly defined.
A constructor cannot be abstract or static or final.
A constructor can be overloaded but can not be overridden.

constructor calling

Calling a constructor from within the same class or different class having is a relation ship is know as contructor calling

we use this key word while calling the constructor in side the same class

and super keyword whille calling constructor, from a different class having is-a Relationship


method overriding
If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.

In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.

Usage of Java Method Overriding
Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.
Method overriding is used for runtime polymorphism

Rules for Java Method Overriding
The method must have the same name as in the parent class
The method must have the same parameter as in the parent class.
There must be an IS-A relationship (inheritance).

method overloading
If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.

If we have to perform only one operation, having same name of the methods increases the readability of the program.

Suppose you have to perform addition of the given numbers but there can be any number of arguments, if you write the method such as a(int,int) for two parameters, and b(int,int,int) for three parameters then it may be difficult for you as well as other programmers to understand the behavior of the method because its name differs.

So, we perform method overloading to figure out the program quickly.
Play Video

java method overloading
Advantage of method overloading
Method overloading increases the readability of the program.

Different ways to overload the method
There are two ways to overload the method in java

By changing number of arguments
By changing the data type